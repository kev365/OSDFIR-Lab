## OSDFIR Infrastructure Helm Chart
## Please use this Helm chart for deploying Open Source Digital Forensics Tools
## to a Kubernetes environment.
## The following tools are supported in this deployment:
## - Timesketch; ref https://github.com/google/timesketch
## - Yeti; ref https://github.com/yeti-platform/yeti
## - OpenRelik; ref https://github.com/openrelik
## - GRR; ref https://github.com/google/grr
##
## @section Global parameters
## Please, note that this will override the parameters configured to use the global value
##
global:
  ## Global Persistence Configuration
  ##
  timesketch:
    ## @param global.timesketch.enabled Enables the Timesketch deployment (only used in the main OSDFIR Infrastructure Helm chart)
    ##
    enabled: true
  yeti:
    ## @param global.yeti.enabled Enables the Yeti deployment (only used in the main OSDFIR Infrastructure Helm chart)
    ##
    enabled: true
  openrelik:
    ## @param global.openrelik.enabled Enables the OpenRelik deployment (only used in the main OSDFIR Infrastructure Helm chart)
    ##
    enabled: true
  grr:
    ## @param global.grr.enabled Enables the GRR deployment (only used in the main OSDFIR Infrastructure Helm chart)
    ##
    enabled: false
  hashr:
    ## @param global.hashr.enabled Enables the HashR deployment (only used in the main OSDFIR Infrastructure Helm chart)
    ##
    enabled: true
  turbinia:
    ## @param global.turbinia.enabled Enables the Turbinia deployment (only used in the main OSDFIR Infrastructure Helm chart)
    ##
    enabled: false
  ## Global ingress parameters used to configure Timesketch, Yeti under a loadbalancer
  ##
  ingress:
    ## @param global.ingress.enabled Enable the global loadbalancer for external access (only used in the main OSDFIR Infrastructure Helm chart)
    ##
    enabled: false
    ## @param global.ingress.timesketchHost Domain name Timesketch will be hosted under
    ##
    timesketchHost: ""
    ## @param global.ingress.yetiHost Domain name Yeti will be hosted under
    ##
    yetiHost: ""
    ## @param global.ingress.openRelikFrontendHost FQDN of the OpenRelik UI will be hosted under (defaults to localhost)
    ##
    openRelikFrontendHost: ""
    ## @param global.ingress.openRelikAPIHost FQDN of the OpenRelik API host will be hosted under (defaults to localhost)
    ##
    openRelikAPIHost: ""
    ## @param global.ingress.className IngressClass that will be be used to implement the Ingress
    ## ref https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/
    ##
    className: ""
    ## @param global.ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param global.ingress.certManager Add the corresponding annotations for cert-manager integration
    ##
    certManager: false
    ## GCP ingress configuration
    ##
    gcp:
      ## @param global.ingress.gcp.managedCertificates Enabled GCP managed certificates for your domain
      ## ref https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs
      ##
      managedCertificates: false
      ## @param global.ingress.gcp.staticIPName Name of the static IP address you reserved in GCP
      ## This is required when using "gce" in ingress.className
      ## ref https://cloud.google.com/compute/docs/ip-addresses/reserve-static-external-ip-address
      ##
      staticIPName: ""
      ## @param global.ingress.gcp.staticIPV6Name Name of the static IPV6 address you reserved in GCP. This can be optionally provided to deploy a loadbalancer with an IPV6 address
      ## ref https://cloud.google.com/compute/docs/ip-addresses/reserve-static-external-ip-address
      ##
      staticIPV6Name: ""

timesketch:
  image:
    repository: us-docker.pkg.dev/osdfir-registry/timesketch/timesketch
    tag: latest
  persistence:
    enabled: true
    existingPVC: osdfirvolume

hashr:
  image:
    repository: us-docker.pkg.dev/osdfir-registry/hashr/release/hashr
    pullPolicy: IfNotPresent
    tag: latest
  postgresql:
    image:
      repository: postgres
      tag: "17.2-alpine"

yeti:
  persistence:
    enabled: true
    existingPVC: osdfirvolume
  frontend:
    image:
      repository: yetiplatform/yeti-frontend
      pullPolicy: Always
      tag: latest
  api:
    image:
      repository: yetiplatform/yeti
      pullPolicy: Always
      tag: latest
  tasks:
    image:
      repository: yetiplatform/yeti
      pullPolicy: Always
      tag: latest
  arangodb:
    image:
      repository: arangodb
      pullPolicy: Always
      tag: latest

openrelik:
  persistence:
    enabled: true
    existingPVC: osdfirvolume
  frontend:
    image:
      repository: ghcr.io/openrelik/openrelik-ui
      pullPolicy: IfNotPresent
      tag: "latest"
  api:
    image:
      repository: ghcr.io/openrelik/openrelik-server
      pullPolicy: IfNotPresent
      tag: "latest"
  mediator:
    image:
      repository: ghcr.io/openrelik/openrelik-mediator
      pullPolicy: IfNotPresent
      tag: "latest"
  metrics:
    image:
      repository: ghcr.io/openrelik/openrelik-metrics
      pullPolicy: IfNotPresent
      tag: "latest"
  redis:
    image:
      repository: redis
      tag: "7.4.2-alpine"
  postgresql:
    image:
      repository: postgres
      tag: "17.2-alpine"
  prometheus:
    image:
      repository: prom/prometheus
      tag: "v3.0.1"
  workers:
    - name: openrelik-worker-analyzer-config
      image: ghcr.io/openrelik/openrelik-worker-analyzer-config:latest
      command: "celery --app=src.app worker --task-events --concurrency=4 --loglevel=INFO -Q openrelik-worker-analyzer-config"
      env: {}
      resources: {}

    - name: openrelik-worker-plaso
      image: ghcr.io/openrelik/openrelik-worker-plaso:latest
      command: "celery --app=src.app worker --task-events --concurrency=2 --loglevel=INFO -Q openrelik-worker-plaso"
      env: {}
      resources: {}

    - name: openrelik-worker-strings
      image: ghcr.io/openrelik/openrelik-worker-strings:latest
      command: "celery --app=src.app worker --task-events --concurrency=4 --loglevel=INFO -Q openrelik-worker-strings"
      env: {}
      resources: {}

    - name: openrelik-worker-timesketch
      image: ghcr.io/openrelik/openrelik-worker-timesketch:latest
      command: "celery --app=src.app worker --task-events --concurrency=1 --loglevel=INFO -Q openrelik-worker-timesketch"
      env: {}
      resources: {}

    - name: openrelik-worker-extraction
      image: ghcr.io/openrelik/openrelik-worker-extraction@sha256:9e6a7d94e5af685be32b40e2be7c9ae6aaac77ab7d26bad7dd4c4dacd1f342d0
      command: "celery --app=src.app worker --task-events --concurrency=2 --loglevel=INFO -Q openrelik-worker-extraction"
      env: {}
      resources: {}
